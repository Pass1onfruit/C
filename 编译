
编写的代码是存在文件系统上的
编译器去读这个程序，通过编译链接生成二进制可执行程序a.out
./a.out在一个终端下去运行程序，运行程序a.out相当于终端创建了一个子进程，exec对创建的子进程进行替换，替换成a.out
a.out中的 代码指令 加载到 代码段
其中的 全局数据 加载到 数据段
然后建立main函数的栈帧，往下走
进行资源销毁，结束

CPP.c --->(预处理)CPP.i --->(编译)CPP.s --->(汇编)CPP.o --->(链接)可执行文件

linux中
预处理时可以使用 -E 选项，提示编译器执行完预处理就停下来，后边的过程就先不执行了，生成一个.i文件
编译时可以使用 -s 选项，提示编译器执行完编译就停下来，生成一个 .s文件
汇编时可以使用 -c 选项，提示编译器执行完汇编就停下来，生成一个 .o文件

预处理：
将所有的“#define”删除，展开所有的宏定义
处理“#include”预编译指令，将被包含的头文件插入到该编译指令的位置
处理所有的条件编译指令，比如“#if”、“#ifdef”、“#elif”、“#else”、“#endif”
删除所有的注释“//”和“/* */”。
添加行号和文件名标识，方便后边编译时编译器产生调试用的行号心意以及编译时产生编译错误或警告时能够显示行号
保留所有的#pragma编译指令，因为编译器需要使用它们

编译：
编译成功，则会将源代码由文本形式转换成机器语言
把预处理后文件进行 词法分析、语法分析、语义分析、优化后生成相应的汇编代码文件

词法分析：输入源程序，对构成源程序的字符串进行扫描和分解，识别出每个单词

语法分析：在词法分析的基础上，根据语言的语法规则，把单词符号串分解成各类语法单位，如“短语”、“句子”、“程序段”和“程序”等。通过语法分析，确定整个输入串是否构成语法上正确的“程序”。词法分析是一种线性分析，而语法分析是一种层次结构分析

语义分析：依循语言的语义规则(属性文法描述)，完成对表达式语法层面的分析(仅静态语义)，如果语义正确，则进行另一方面工作，即进行中间代码的解释

目标代码生成：代码生成器将中间代码转成机器代码，这个过程是依赖于目标机器的，因为不同的机器有着不同的字长、寄存器、数据类型等。

中间代码产生：中间代码一般与目标机器和运行环境无关，中间代码使得编译器可以分为前端和后端，前端负责产生于机器无关的中间代码，后端将中间代码换成机器代码

汇编：
汇编过程调用汇编器as来完成，是用于将汇编代码转换成机器可以执行的指令，每一个汇编语句几乎都对应一条机器指令

链接：
C语言不支持同名函数，因为链接找的过程中不能够区分
将各个模块之间相互引用的部分正确的衔接起来，把一些指令对其他符号地址的引用加以修正，如地址和空间分配、符号决议(用符号来去标识一个地址)和重定向
将每个模块的源代码文件编译成目标文件（Linux：.o  Windows：.obj），然后将目标文件和库(一组目标文件的包，如运行时库，支持程序运行的基本函数的集合)一起链接形成最后的可执行文件
