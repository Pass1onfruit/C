#define：预编译指令，在预编译的时候，进行文本替换
typedef：编译时处理，为类型取一个别名

两者都可以用来表示数据类型，如：
#define _int_ int
typedef int _int_;
两者效果是一样的的，调用也一样

#define int_ptr1 int * 
int_ptr1 a, b;
//效果同  int *a, b;  表示定义了一个 整型指针变量a 和 整型变量b 
//在预处理时进行简单的宏替换
//a,b可更改，但是ab指向的内容不可更改
//int_ptr1是一种指针类型 const int_ptr1 p 就是把指针给锁住了 p不可更改

typedef int * int_ptr2; 
int_ptr2 a, b;
//效果同 int *a; int *b;  表示定义了两个整型指针变量
//a, b 都为指向int的指针,typedef为int* 引入了一个新的别名
//a,b不可更改，但ab指向的内容可更改
//const int_ptr2 p 是const int * p 锁的是指针p所指的对象

宏定义只是简单的字符串代换，在预处理阶段完成
而typede不是简单的字符串代换，而是采用如同定义变量的方法那样来声明一种类型，用来做类型说明符的重命名，只是为了增加可读性而为标识符另起的新名称(仅仅只是个别名)，类型的别名可以具有类型定义说明的功能，在编译阶段完成
